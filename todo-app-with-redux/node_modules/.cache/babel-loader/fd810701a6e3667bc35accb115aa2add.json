{"ast":null,"code":"import { ADD_TODO, TOGGLE_TODO, SET_FILTER, GET_TODO, DELETE_TODO } from \"./actionTypes\";\nimport axios from 'axios';\nimport { store } from \"../index\";\nexport const setFilter = filter => ({\n  type: SET_FILTER,\n  payload: {\n    filter\n  }\n}); //To add a new item to the list\n\nexport const addTodo = content => {\n  console.log(\"ADD NEW ITEM TO THE LIST\");\n  let added_item = {\n    content: content\n  }; //Will send to Node JS the content only.\n  //nextTodoId= nextTodoId+1;\n\n  console.log(added_item);\n  return dispatch => {\n    return axios.post('http://localhost:81/todo/App/api/todo/', added_item).then(response => dispatch({\n      type: ADD_TODO,\n      todo: response\n    })).catch(err => dispatch({\n      type: \"ERROR\",\n      msg: \"FAILED\"\n    }));\n  };\n};\nexport const getData = () => {\n  console.log(\"GETTING DATA FROM NODE\");\n  return dispatch => {\n    return fetch('http://localhost:81/todo/App/api/todos/').then(response => response.json()).then(json => dispatch({\n      type: \"GET_DATA\",\n      todo: json\n    })).catch(err => dispatch({\n      type: \"ERROR\",\n      msg: \"FAILED\"\n    }));\n  };\n}; //To convert the item from incompleted and mark it completed or Vice versa.\n\nexport const toggleTodo = content => {\n  console.log(\"CHANGE ITEM FROM INCOMPELTE TO COMPLETED\");\n  console.log(`The Item that will be marked is ${content}`);\n  return dispatch => {\n    return axios.patch('http://localhost:81/todo/App/api/todo/', {\n      content\n    }).then(response => dispatch({\n      type: \"TOGGLE_TODO\",\n      todo: response\n    })).catch(err => dispatch({\n      type: \"ERROR\",\n      msg: \"FAILED\"\n    }));\n  };\n}; //\n\nexport function DeleteTodoSuccess(todo) {\n  console.log(\"DELET SUCCESS\");\n  console.log(`todo in DeleteTodoSuccess ${todo}`);\n  return {\n    type: 'DELETE_TODO',\n    todo\n  };\n}\nexport const deleteTodo = content => {\n  console.log(\"REMOVING ITEM\");\n  console.log(`The Item that will be removed is ${content}`);\n  var config = {\n    headers: {\n      'User-Agent': '',\n      'Accept': '',\n      'Host': ''\n    }\n  };\n  axios.delete('http://localhost:81/todo/App/api/todo', {\n    params: {\n      content: content\n    }\n  }, config).then(res => {\n    console.log(res.data);\n    store.dispatch(DeleteTodoSuccess(res.data));\n  }).catch(function (error) {\n    console.log(`error is ${error}`);\n    console.log(JSON.stringify(error, null, 2));\n  });\n}; // export const deleteTodo = (content) => {\n//   console.log(\"REMOVE ITEMS\");\n//   console.log(`The Item that be removed is ${content}`);\n//   var config = {\n//             headers: {\n//                 'User-Agent':'',\n//                 'Accept':'',\n//                 'Host':''\n//             }\n//         };\n//   return(dispatch) => {\n//     axios.delete('http://localhost:81/todo/App/api/todo/',{content}).then(response => dispatch(\n//       {\n//         type: \"DELETE_TODO\", todo: response})).catch(err => dispatch({\n//           type: \"ERROR\", msg: \"FAILED\"}))\n//   }\n//\n//         // axios.delete('http://localhost:81/todo/App/api/todo', {params: {content: content}}, config).then((res) =>\n//         //       {\n//         //         console.log(res.data);\n//         //       const delete2 = DeleteTodoSuccess(res);\n//         //       console.log(`delete is ${delete2.type}`);\n//         //      this.store.dispatch({});\n//         //   //   this.props.dispatch(DeleteTodoSuccess(res.data));\n//         //       console.log(\"After dispatch\");\n//         //           //this.props.dispatch({type: \"DELETE_TODO\", todo: res.data});\n//         //       })\n//         //       .catch( function(error) {\n//         //         console.log(`ERROR is ${error}`);\n//         //       //    console.log(JSON.stringify(error, null, 2));\n//         //       });\n//             }","map":{"version":3,"sources":["/Users/nourhanel-shenawy/Documents/DarkMatter BootCamp/GitHub Zipped Projects/CARBON/Assignment-master/todo-app-with-redux/src/redux/actions.js"],"names":["ADD_TODO","TOGGLE_TODO","SET_FILTER","GET_TODO","DELETE_TODO","axios","store","setFilter","filter","type","payload","addTodo","content","console","log","added_item","dispatch","post","then","response","todo","catch","err","msg","getData","fetch","json","toggleTodo","patch","DeleteTodoSuccess","deleteTodo","config","headers","delete","params","res","data","error","JSON","stringify"],"mappings":"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","sourcesContent":["import { ADD_TODO, TOGGLE_TODO, SET_FILTER, GET_TODO, DELETE_TODO} from \"./actionTypes\";\nimport axios from 'axios';\nimport {store} from \"../index\";\nexport const setFilter = filter => ({ type: SET_FILTER, payload: { filter } });\n\n\n\n\n//To add a new item to the list\nexport const addTodo = (content) => {\n  console.log(\"ADD NEW ITEM TO THE LIST\");\n  let added_item = {content: content}; //Will send to Node JS the content only.\n  //nextTodoId= nextTodoId+1;\n  console.log(added_item);\n  return(dispatch) => {\n    return axios.post('http://localhost:81/todo/App/api/todo/',added_item).then(response => dispatch(\n      {\n        type: ADD_TODO, todo: response})).catch(err => dispatch({\n          type: \"ERROR\", msg: \"FAILED\"}))\n  }\n}\n\nexport const getData = () => {\n  console.log(\"GETTING DATA FROM NODE\");\n  return(dispatch) => {\n    return fetch('http://localhost:81/todo/App/api/todos/').then(response => response.json()).then(json => dispatch(\n      {\n        type: \"GET_DATA\", todo: json})).catch(err => dispatch({\n          type: \"ERROR\", msg: \"FAILED\"}))\n  }\n}\n\n\n//To convert the item from incompleted and mark it completed or Vice versa.\nexport const toggleTodo = (content) => {\n  console.log(\"CHANGE ITEM FROM INCOMPELTE TO COMPLETED\");\n  console.log(`The Item that will be marked is ${content}`);\n  return(dispatch) => {\n    return axios.patch('http://localhost:81/todo/App/api/todo/',{content}).then(response => dispatch(\n      {\n        type: \"TOGGLE_TODO\", todo: response})).catch(err => dispatch({\n          type: \"ERROR\", msg: \"FAILED\"}))\n  }\n\n}\n\n//\n\nexport function DeleteTodoSuccess(todo){\n  console.log(\"DELET SUCCESS\");\n  console.log(`todo in DeleteTodoSuccess ${todo}`);\n    return{\n        type: 'DELETE_TODO',\n        todo\n    }\n}\n\nexport const deleteTodo = (content) => {\n  console.log(\"REMOVING ITEM\");\n  console.log(`The Item that will be removed is ${content}`);\n  var config = {\n            headers: {\n                'User-Agent':'',\n                'Accept':'',\n                'Host':''\n            }\n        };\n        axios.delete('http://localhost:81/todo/App/api/todo', {params: {content: content}}, config).then((res) =>\n              {\n                console.log(res.data);\n               store.dispatch(DeleteTodoSuccess(res.data));\n              })\n              .catch( function(error) {\n                console.log(`error is ${error}`);\n                  console.log(JSON.stringify(error, null, 2));\n              });\n\n            }\n// export const deleteTodo = (content) => {\n//   console.log(\"REMOVE ITEMS\");\n//   console.log(`The Item that be removed is ${content}`);\n//   var config = {\n//             headers: {\n//                 'User-Agent':'',\n//                 'Accept':'',\n//                 'Host':''\n//             }\n//         };\n//   return(dispatch) => {\n//     axios.delete('http://localhost:81/todo/App/api/todo/',{content}).then(response => dispatch(\n//       {\n//         type: \"DELETE_TODO\", todo: response})).catch(err => dispatch({\n//           type: \"ERROR\", msg: \"FAILED\"}))\n//   }\n//\n//         // axios.delete('http://localhost:81/todo/App/api/todo', {params: {content: content}}, config).then((res) =>\n//         //       {\n//         //         console.log(res.data);\n//         //       const delete2 = DeleteTodoSuccess(res);\n//         //       console.log(`delete is ${delete2.type}`);\n//         //      this.store.dispatch({});\n//         //   //   this.props.dispatch(DeleteTodoSuccess(res.data));\n//         //       console.log(\"After dispatch\");\n//         //           //this.props.dispatch({type: \"DELETE_TODO\", todo: res.data});\n//         //       })\n//         //       .catch( function(error) {\n//         //         console.log(`ERROR is ${error}`);\n//         //       //    console.log(JSON.stringify(error, null, 2));\n//         //       });\n//             }\n"]},"metadata":{},"sourceType":"module"}